#!/usr/bin/env python3
# @file      visualize_dataset.py
# @author    Ignacio Vizzo     [ivizzo@uni-bonn.de]
#
# Copyright (c) 2020 Ignacio Vizzo, all rights reserved

import os
import time
import glob
import shutil

import click
import open3d as o3d
from tqdm import trange

import subprocess


def sendmessage(message):
    subprocess.Popen(['notify-send', message])
    return


def collect_json(pattern, tmp_dir=None):
    """Helper to collect the .json files generated by the renderer."""
    json_files = glob.glob(pattern)

    if not json_files:
        return None

    json_file = max(json_files, key=os.path.getctime)

    # Move files to temp directory
    if tmp_dir:
        json_file = shutil.move(json_file, os.path.join(tmp_dir, json_file))

    return json_file


def collect_options_and_camera_position(use_last=False):
    # Create an empty temporary directory
    tmp_dir = '/tmp/render_files/'
    os.makedirs(tmp_dir, exist_ok=True)

    # This is how the Open3D files looks when exported from the visualizer
    render_pattern = "RenderOption*.json"
    camera_pattern = "ScreenCamera*.json"

    if use_last:
        # Take whatever was the last json files used in the /tmp directory
        render_pattern = os.path.join(tmp_dir, "RenderOption*.json")
        camera_pattern = os.path.join(tmp_dir, "ScreenCamera*.json")

    option_file = collect_json(render_pattern, tmp_dir)
    camera_file = collect_json(camera_pattern, tmp_dir)
    return option_file, camera_file


@click.command()
@click.option('--dataset',
              '-d',
              type=click.Path(exists=True),
              required=False,
              help='Full path to dataset location [KITTI format]')
@click.option('--sequence',
              '-s',
              type=str,
              default="00",
              help='Sequence number [KITTI format]')
@click.option('--start',
              type=int,
              default=0,
              help='The first scan to visualize')
@click.option('--end',
              type=int,
              default=None,
              help='The Last scan to visualize')
@click.option('--delay',
              type=float,
              default=20E-3,
              help='How much delay between each scan visualization')
@click.option('--use_last',
              is_flag=True,
              default=False,
              help='Use the last camera/render options')
def main(dataset, sequence, start, end, delay, use_last):
    if dataset:
        scans_path = os.path.join(dataset, 'sequences', sequence, 'velodyne/')
    else:
        scans_path = os.path.join(os.getcwd(), '')

    scan_names = sorted(glob.glob(scans_path + '*.ply'))
    first_scan = o3d.io.read_point_cloud(scan_names[start])

    # Calculate the ammount of scans to visualize
    end = len(scan_names) if not end else end
    print("Rendering scans [{s},{e}] from:{d}".format(s=start,
                                                      e=end,
                                                      d=scans_path))

    # Now it's time to create your visualizer
    vis = o3d.visualization.Visualizer()
    vis.create_window()
    vis.add_geometry(first_scan)

    # If you want a new camera/render options you should pick by hand:
    if not use_last:
        msg = 'Select a view point and render options, then press "P + 0"'
        print(' >>>', msg, ' <<<')
        sendmessage(msg)
        vis.run()

    # Collect the options and perform a sanity check before proceeding
    render_options, camera_file = collect_options_and_camera_position(use_last)
    if not render_options and not camera_file:
        print("[WARNING] No viewpoint/options provided, using defaults")
        camera = o3d.camera.PinholeCameraParameters()
    else:
        camera = o3d.io.read_pinhole_camera_parameters(camera_file)
        vis.get_render_option().load_from_json(render_options)
    ctr = vis.get_view_control()
    ctr.convert_from_pinhole_camera_parameters(camera)

    # sanity check
    print(" >>> Press [q] to continue <<<")
    vis.run()

    for idx in trange(start, end):
        scan = o3d.io.read_point_cloud(scan_names[idx])
        vis.clear_geometries()
        vis.add_geometry(scan)
        ctr.convert_from_pinhole_camera_parameters(camera)
        vis.poll_events()
        vis.update_renderer()
        time.sleep(delay)

    vis.destroy_window()


if __name__ == "__main__":
    main()
